openapi: 3.0.2
info:
  version: 1.0.0
  title: OpenAPI Example
servers:
  - url: http://localhost:8080/openapi/v1
tags:
  - name: versions
    description: Get mobile application versions
  - name: devices
    description: Operation about devices
  - name: users
    description: Operations about users
  - name: tokens
    description: Operations about authorization tokens
paths:
  /versions:
    get:
      operationId: getVersions
      summary: Return a latest version and a required version
      description: ''
      tags:
        - versions
      parameters:
        - in: query
          name: os
          required: true
          description: ''
          schema:
            type: string
            enum:
              - android
              - ios
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Versions'
        400:
          description: Bad request
        500:
          description: Internal server error
        503:
          description: Under maintenance
  /device:
    post:
      operationId: registerDeviceToken
      summary: Register device token for push notification
      description: ''
      tags:
        - devices
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        400:
          description: Bad request
        500:
          description: Internal server error
        503:
          description: Under maintenance
  /user:
    get:
      operationId: findAuthorizedUser
      summary: Find an authorized user
      description: ''
      tags:
        - users
      security:
        - Bearer: []
      parameters:
        - in: path
          name: userName
          required: true
          description: ''
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
        401:
          description: Access token is missing or invalid
        500:
          description: Internal server error
        503:
          description: Under maintenance
    post:
      operationId: createUser
      summary: Create a new user
      description: ''
      tags:
        - users
      parameters:
        - in: path
          name: userName
          required: true
          description: ''
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
        500:
          description: Internal server error
        503:
          description: Under maintenance
    put:
      operationId: updateAuthorizedUser
      summary: Update an authorized user
      description: ''
      tags:
        - users
      security:
        - Bearer: []
      parameters:
        - in: path
          name: userName
          required: true
          description: ''
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
        401:
          description: Access token is missing or invalid
        500:
          description: Internal server error
        503:
          description: Under maintenance
  /user/login:
    post:
      operationId: loginUser
      summary: Login user by user's credential
      description: ''
      tags: 
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credential'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationTokens'
        400:
          description: Bad request
        500:
          description: Internal server error
        503:
          description: Under maintenance
  /users/{userName}:
    get:
      operationId: findUserByUserName
      summary: Find a user by user name
      description: ''
      tags:
        - users
      security:
        - Bearer: []
      parameters:
        - in: path
          name: userName
          required: true
          description: ''
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
        401:
          description: Access token is missing or invalid
        500:
          description: Internal server error
        503:
          description: Under maintenance
  /users:
    get:
      operationId: findAllUsers
      summary: Find all users
      description: ''
      tags:
        - users
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          description: Bad request
        401:
          description: Access token is missing or invalid
        500:
          description: Internal server error
        503:
          description: Under maintenance
  /tokens/refresh:
    post:
      operationId: refreshTokens
      summary: Refresh tokens
      description: ""
      tags:
        - tokens
      security:
        - Bearer:
            []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizationTokens"
        required: true
      responses:
        200:
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/AuthorizationTokens"
        400:
          description: Bad request
        401:
          description: Access token is missing or invalid
        500:
          description: Internal server error
        503:
          description: Under maintenance
components:
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
          example: user name
        email:
          type: string
          example: hoge@fuga.com
        phoneNumber:
          type: string
          example: 0123456789012
      required:
        - name
    AuthorizationTokens:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTcyMzkwMjJ9.k_SimHta0DlhbRkKZIrtKFczsXac9YID1Vwz2O3suuI
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTcyMzkwMjJ9.k_SimHta0DlhbRkKZIrtKFczsXac9YID1Vwz2O3suuI
      required:
        - access_token
        - refresh_token
    Versions:
      type: object
      properties:
        latestVersion: 
          type: string
          example: 2.0.0
        requiredVersion: 
          type: string
          example: 1.0.0
      required:
        - latestVersion
        - requiredVersion
    Credential:
      type: object
      properties:
        userName:
          type: string
          example: jenkins
        password:
          type: string
          example: strongestPasswordAllOverTheWorld12345!
    Device:
      type: object
      properties:
        token:
          type: string
          example: thisIsDeviceTokenForPushNotification

